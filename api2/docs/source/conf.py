# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import json
import os
import sys
from datetime import date

sys.path.insert(0, os.path.abspath('../../src'))


# -- API implementation statuses -----------------------------------------------------

def make_rst_table_with_header(table_data):
    rst_table = ""

    page_title = table_data['title']
    headers = table_data['headers']
    headers_attributes = table_data['headers attributes']
    data = table_data['data']

    rst_table = ""

    # write page title
    rst_table += "{}\n{}\n".format(page_title, "-" * len(page_title))

    table_data = [headers]
    table_links = []
    column_lengths = []

    # create list of lists with rows of data
    for data_row in data:
        row = []
        for attr in headers_attributes:
            if attr == 'name' and 'url' in data_row.keys():
                row.append("`{}`_".format(data_row[attr]))
                table_links.append(".. _{}: {}".format(data_row[attr], data_row['url']))
            else:
                row.append(data_row[attr])
        table_data += [row]

    # calculate max column length
    for column_num in range(len(table_data[0])):
        column_lengths.append(max([len(table_data[row_num][column_num]) for row_num in range(len(table_data))]))

    # add table borders
    table_data.insert(0, ["=" * column_lengths[i] for i in range(len(column_lengths))])
    table_data.insert(2, ["=" * column_lengths[i] for i in range(len(column_lengths))])

    # write rst table from table_data list of lists to string
    for row in table_data:
        for column_num in range(len(row)):
            rst_table += row[column_num]
            if column_num != len(row) - 1:
                rst_table += " " * (column_lengths[column_num] - len(row[column_num]) + 1)
            else:
                rst_table += '\n'

    # add links and border
    rst_table += " ".join(["=" * each for each in column_lengths]) + "\n\n"
    rst_table += '\n'.join(table_links)

    return rst_table


with open("../../api_implementation.json", "r") as json_data, \
        open('api_implementation.rst', 'w') as api_implementation:
    table_data = json.load(json_data)
    content = make_rst_table_with_header(table_data)
    api_implementation.write(content)

# -- Project information -----------------------------------------------------

project = 'nextcloud-API'
copyright = '2018, EnterpriseyIntranet'
author = 'EnterpriseyIntranet'

# The short X.Y version
version = ''
# The full version, including alpha/beta/rc tags
release = '0.0.1'


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.doctest', 'sphinx.ext.autodoc', 'sphinx.ext.napoleon',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['ntemplates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'nextcloud-APIdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'nextcloud-API.tex', 'nextcloud-API Documentation',
     'EnterpriseyIntranet', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'nextcloud-api', 'nextcloud-API Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'nextcloud-API', 'nextcloud-API Documentation',
     author, 'nextcloud-API', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Extension configuration -------------------------------------------------
